library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData <- data.frame(diagnosis,predictors)
trainIndex <- createDataPartition(diagnosis, p = 0.50,list=FALSE)
training <- adData[trainIndex,]
testing <- adData[-trainIndex,]
source('C:/Users/sarah/uni/S6/Data Science Coursera/8 Practical Machine Learning/scripts.R')
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(caret)
install.packages("caret")
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
plot(row.names(training), training$CompressiveStrength)
library(Hmisc)
?cut2
plot(row.names(training), training$CompressiveStrength, col = cut2(training$FlyAsh))
library(ggplot2)
qplot(row.names(training), training$CompressiveStrength, color = cut2(training$FlyAsh))
qplot(row.names(mixtures), mixtures$CompressiveStrength, color = cut2(mixtures$FlyAsh))
qplot(row.names(mixtures), mixtures$CompressiveStrength, color = cut2(mixtures$Cement))
qplot(row.names(mixtures), mixtures$CompressiveStrength, color = cut2(mixtures$BlastFurnaceSlag))
qplot(row.names(mixtures), mixtures$CompressiveStrength, color = cut2(mixtures$Age))
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
summary(training$Superplasticizer)
log(0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
il <- training[grepl("^IL")]
?grepl
il <- training[grepl("^IL", training)]
?greplgrepl("^IL", training)
grepl("^IL", training)
grepl("^IL", names(training))
il <- training[grepl("^IL", names(training))]
?preProcess
preProcess(il, method="pca")
preProcess(il, method="pca", thresh = .9)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("^IL", names(training))
names(training)
ilt <- training[c(1, grep("^IL", names(training))), ]
ilt <- training[, c(1, grep("^IL", names(training)))]
?train
fit1 <- train(ilt[,-1], ilt[,1], method="glm")
fit1$modelInfo
fit1$finalModel
fit1$results
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
setwd("C:/Users/sarah/uni/S6/Data Science Coursera/Github/datasciencecoursera/9 Developing Data Products/Assignment 1")
spacex <- read.csv("spacex-missions.csv")
head(spacex)
table(spacex$Launch.Site)
spacex <- read.csv("DSuniversities.csv")
dsu <- read.csv("DSuniversities.csv")
head(dsu)
dsu <- data.frame(lat = dsu$LOC_LAT, lon=dsu$LOC_LONG, descr = school=dsu$SCHOOL + "<br>" + course=dsu$PROGRAM)
dsu <- data.frame(lat = dsu$LOC_LAT, lon = dsu$LOC_LONG, descr = (school=dsu$SCHOOL + "<br>" + course=dsu$PROGRAM))
dsu <- data.frame(lat = dsu$LOC_LAT, lon = dsu$LOC_LONG, descr = paste0(school=dsu$SCHOOL + "<br>" + course=dsu$PROGRAM))
?data.frame
dsu <- data.frame(lat = dsu$LOC_LAT, lon = dsu$LOC_LONG, descr = paste0(dsu$SCHOOL + "<br>" + dsu$PROGRAM))
dsu <- data.frame(lat = dsu$LOC_LAT, lon = dsu$LOC_LONG, descr = paste0(dsu$SCHOOL, "<br>", dsu$PROGRAM))
paste0(dsu$SCHOOL, "<br>", dsu$PROGRAM)
dsu
dsu <- read.csv("DSuniversities.csv")
dsu <- data.frame(lat = dsu$LOC_LAT, lon = dsu$LOC_LONG, descr = paste0(dsu$SCHOOL, "<br>", dsu$PROGRAM))
head(dsu)
my_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng=dsu$lon, lat=dsu$lat)
my_map
?addCircleMarkers
my_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng=dsu$lon, lat=dsu$lat, label=dsu$descr)
my_map
my_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng=dsu$lon, lat=dsu$lat, label=dsu$descr, clusterOptions = markerClusterOptions())
my_map
?leaflet
my_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng=dsu$lon, lat=dsu$lat, label=dsu$descr, clusterOptions = markerClusterOptions())
my_map
?escapehtml
?htmlEscape
?HTML
head(dsu)
dsu <- read.csv("DSuniversities.csv")
str(dsu)
dsu <- read.csv("DSuniversities.csv", stringsAsFactors = FALSE)
my_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = dsu$LOC_LONG,
lat = dsu$LOC_LAT,
label = HTML(dsu$SCHOOL, "<br>", dsu$PROGRAM),
clusterOptions = markerClusterOptions())
library(htmltools)
library(leaflet)
dsu <- read.csv("DSuniversities.csv", stringsAsFactors = FALSE)
my_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(lng = dsu$LOC_LONG,
lat = dsu$LOC_LAT,
label = HTML(dsu$SCHOOL, "<br>", dsu$PROGRAM),
clusterOptions = markerClusterOptions())
my_map
dsu$label <- paste0(dsu$SCHOOL, "<br>", dsu$PROGRAM)
head(paste0(dsu$SCHOOL, "<br>", dsu$PROGRAM))
head(HTML(paste0(dsu$SCHOOL, "<br>", dsu$PROGRAM)))
